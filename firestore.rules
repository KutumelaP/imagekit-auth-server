rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helpers
    function isAuthenticated() {
      return request.auth != null;
    }
    function isAdmin() {
      return isAuthenticated() && (
        request.auth.token.admin == true ||
        request.auth.token.role == 'admin' ||
        (
          exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
        )
      );
    }
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    function isSellerApproved(data) {
      return data.role == 'seller' && data.status == 'approved';
    }
    function onlyFollowersChanged() {
      return resource.data.diff(request.resource.data).changedKeys().hasOnly(['followers']);
    }
    function followersDelta() {
      return request.resource.data.followers - resource.data.followers;
    }
    function followDoc(sellerId) {
      return getAfter(/databases/$(database)/documents/users/$(request.auth.uid)/follows/$(sellerId));
    }
    function isParticipant(chatData) {
      return isAuthenticated() && (
        chatData.buyerId == request.auth.uid || chatData.sellerId == request.auth.uid
      );
    }

    // USERS
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin() || isSellerApproved(resource.data);
      allow write: if isOwner(userId) || isAdmin();

      // followers-only public update (unchanged)
      allow update: if isAuthenticated()
                    && isSellerApproved(resource.data)
                    && onlyFollowersChanged()
                    && (
                      (followersDelta() == 1 && followDoc(userId).exists == true) ||
                      (followersDelta() == -1 && followDoc(userId).exists == false)
                    );

      match /favorites/{favoriteId} {
        allow read, write: if isOwner(userId);
      }
      match /favoriteStores/{storeId} {
        allow read, write: if isOwner(userId);
      }
      match /drivers/{driverId} {
        allow read, write: if isOwner(userId) || isAdmin();
      }
      match /wishlist/{itemId} {
        allow read, write: if isOwner(userId);
      }
      match /cart/{itemId} {
        allow read, write: if isOwner(userId);
      }
      match /search_history/{searchId} {
        allow read, write: if isOwner(userId);
      }
      match /analytics/{analyticsId} {
        allow read, write: if isOwner(userId);
      }
      match /chat_analytics/{analyticsId} {
        allow read, write: if isOwner(userId);
      }
      match /payout/{docId} {
        allow read, write: if isOwner(userId) || isAdmin();
      }
      // Seller payout requests (user-scoped view)
      match /payouts/{payoutId} {
        allow read: if isOwner(userId) || isAdmin();
        allow create: if isOwner(userId) || isAdmin();
        allow update, delete: if isAdmin();
      }
      match /kyc/{docId} {
        allow read, write: if isOwner(userId) || isAdmin();
      }
      match /follows/{storeId} {
        allow get, list, read: if isOwner(userId);
        allow create: if isOwner(userId)
                      && request.resource.data.storeId == storeId
                      && request.resource.data.createdAt is timestamp
                      && request.resource.data.notify is bool;
        allow update: if isOwner(userId)
                      && request.resource.data.diff(resource.data).changedKeys().hasOnly(['notify'])
                      && request.resource.data.notify is bool;
        allow delete: if isOwner(userId);
      }
    }

    // DRIVERS
    match /drivers/{driverId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(driverId) || isAdmin();
    }

    // STORES
    match /stores/{storeId} {
      allow read: if true;
      allow create: if isAuthenticated() && request.resource.data.sellerId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.sellerId == request.auth.uid;
      allow delete: if isAdmin();
    }

    // PRODUCTS
    match /products/{productId} {
      allow read: if true;
      allow create: if isAuthenticated() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isAuthenticated() && (resource.data.ownerId == request.auth.uid || request.resource.data.ownerId == request.auth.uid);
      allow delete: if isAuthenticated() && (resource.data.ownerId == request.auth.uid || isAdmin());
    }

    // ORDERS
    match /orders/{orderId} {
      allow create: if isAuthenticated() && (
        request.resource.data.buyerId == request.auth.uid ||
        request.resource.data.sellerId == request.auth.uid ||
        isAdmin()
      );
      allow read, update, delete: if isAuthenticated() && (
        resource.data.buyerId == request.auth.uid ||
        resource.data.sellerId == request.auth.uid ||
        isAdmin()
      );
    }

    // CHATS
    match /chats/{chatId} {
      allow create: if isAuthenticated() && (
        request.resource.data.buyerId == request.auth.uid ||
        request.resource.data.sellerId == request.auth.uid ||
        isAdmin()
      );
      allow read, update, delete: if isAuthenticated() && (
        resource.data.buyerId == request.auth.uid ||
        resource.data.sellerId == request.auth.uid ||
        (request.method == 'update' &&
          request.resource.data.diff(resource.data).changedKeys().hasOnly(['lastViewed_' + request.auth.uid]) &&
          request.resource.data['lastViewed_' + request.auth.uid] is timestamp
        ) ||
        isAdmin()
      );
      match /messages/{messageId} {
        allow create: if isAuthenticated() && (
          get(/databases/$(database)/documents/chats/$(chatId)).data.buyerId == request.auth.uid ||
          get(/databases/$(database)/documents/chats/$(chatId)).data.sellerId == request.auth.uid ||
          isAdmin()
        );
        allow read, update, delete: if isAuthenticated() && (
          get(/databases/$(database)/documents/chats/$(chatId)).data.buyerId == request.auth.uid ||
          get(/databases/$(database)/documents/chats/$(chatId)).data.sellerId == request.auth.uid ||
          isAdmin()
        );
      }
    }

    // NOTIFICATIONS
    match /notifications/{notificationId} {
      allow create: if isAuthenticated() && (
        request.resource.data.userId == request.auth.uid ||
        (request.resource.data.type == 'new_order_seller' && request.resource.data.data.buyerName != null) ||
        (request.resource.data.type == 'order_status' && request.resource.data.data.status != null)
      );
      allow read, update, delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || isAdmin()
      );
    }

    // FCM TOKENS
    match /fcm_tokens/{tokenId} {
      allow read, write: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
    }
    match /users/{userId}/fcm_tokens/{tokenId} {
      allow read, write: if isOwner(userId);
      allow create: if isOwner(userId);
    }

    // CART (top-level)
    match /cart/{userId} {
      allow read, write: if isOwner(userId);
    }

    // CATEGORIES
    match /categories/{categoryId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // REVIEWS
    match /reviews/{reviewId} {
      allow read: if true;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // RETURNS (split create vs read/update/delete)
    match /returns/{returnId} {
      allow create: if isAuthenticated() && (
        request.resource.data.userId == request.auth.uid ||
        request.resource.data.sellerId == request.auth.uid ||
        isAdmin()
      );
      allow read, update, delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        resource.data.sellerId == request.auth.uid ||
        isAdmin()
      );
    }

    // FAVORITES (top-level)
    match /favorites/{favoriteId} {
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow read, update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // WISHLIST (top-level)
    match /wishlist/{itemId} {
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow read, update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // SHARED WISHLISTS
    match /shared_wishlists/{wishlistId} {
      allow create: if isAuthenticated() && (
        request.resource.data.ownerId == request.auth.uid || isAdmin()
      );
      allow read, update, delete: if isAuthenticated() && (
        resource.data.ownerId == request.auth.uid ||
        resource.data.sharedWith == request.auth.uid ||
        isAdmin()
      );
    }

    // SEARCH HISTORY (top-level)
    match /search_history/{searchId} {
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow read, update, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Admin-only collections
    match /analytics/{id} { allow read, write: if isAdmin(); }
    match /chat_analytics/{id} { allow read, write: if isAdmin(); }
    match /config/{id} { allow read: if true; allow write: if isAdmin(); }
    match /payment_settings/{settingId} { allow read, write: if isAdmin(); }
    match /paxi_pricing/{docId} { allow read, write: if isAdmin(); }
    match /impact/{id} { allow read: if true; allow write: if isAdmin(); }
    match /auditLogs/{id} { allow read, write: if isAdmin(); }
    match /kanban_tasks/{id} { allow read, write: if isAdmin(); }
    match /payment_webhooks/{id} { allow read, write: if isAdmin(); }
    match /payment_status_updates/{id} { allow read, write: if isAdmin(); }
    match /escrow_payments/{id} {
      allow read, write: if isAuthenticated() && (
        resource.data.buyerId == request.auth.uid ||
        resource.data.sellerId == request.auth.uid ||
        isAdmin()
      );
    }
    match /payments/{id} { allow read, write: if isAdmin(); }
    match /recent_payments/{id} { allow read, write: if isAdmin(); }
    match /pending_holdbacks/{id} { allow read, write: if isAdmin(); }
    // Image assets mirror
    match /image_assets/{fileId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    // Central KYC submissions for admin review (optional mirror/queue)
    match /kyc_submissions/{submissionId} {
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow read, update, delete: if isAdmin() || (isAuthenticated() && resource.data.userId == request.auth.uid);
    }
    // Admin settings and financial management collections
    match /admin_settings/{id} { allow read, write: if isAdmin(); }
    match /holdback_schedules/{id} { allow read, write: if isAdmin(); }
    match /seller_payments/{id} { allow read, write: if isAdmin(); }
    match /payment_transactions/{id} { allow read, write: if isAdmin(); }
    match /financial_reports/{id} { allow read, write: if isAdmin(); }
    match /escrow_stats/{id} { allow read, write: if isAdmin(); }
    match /admin_notifications/{id} { allow read, write: if isAdmin(); }
    match /system_metrics/{id} { allow read, write: if isAdmin(); }

    // Global payouts (admin control surface)
    match /payouts/{payoutId} {
      allow read: if isAdmin() || (isAuthenticated() && resource.data.sellerId == request.auth.uid);
      allow create, update, delete: if isAdmin();
    }

    // Platform receivables (COD/settlements)
    match /platform_receivables/{sellerId} {
      allow read: if isAdmin() || isOwner(sellerId);
      match /entries/{entryId} {
        allow read: if isAdmin() || isOwner(sellerId);
        // Only server (admin functions) can mutate; sellers cannot forge availability/settlement
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
      }
      match /settlements/{settlementId} {
        allow read: if isAdmin() || isOwner(sellerId);
        allow create, update, delete: if isAdmin();
      }
    }

    // Push status (admin-only diagnostics)
    match /push_status/{id} { allow read: if isAdmin(); }
    
    // Payout locks (for admin payout management)
    match /payout_locks/{sellerId} {
      allow read, write: if isAdmin();
      allow create, delete: if isAuthenticated() && isOwner(sellerId);
    }
  }
}